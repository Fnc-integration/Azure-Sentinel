// Usage Instruction : 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias as Fortinet_FortiNDR_Cloud.
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. Fortinet_FortiNDR_Cloud | take 10).
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions

let FortiNDR_Cloud_suricata_view = view () {
    FncEventsSuricata_CL
    | extend
        DstIpEnrichmentsAnnotationsTags=column_ifexists('dst_ip_enrichments_annotations_tags_s', ''),
        SrcIpEnrichmentsAnnotationTags=column_ifexists('src_ip_enrichments_annotations_tags_s', ''),
        HttpRefer=column_ifexists('http_http_refer_s', ''),
        Intel=column_ifexists('intel_s', ''),
        SrcIpEnrichmentsGeoSubdivision=column_ifexists('src_ip_enrichments_geo_subdivision_s', ''),
        SrcIpEnrichmentsGeoCity=column_ifexists('src_ip_enrichments_geo_city_s', ''),
        SrcIpEnrichmentsAnnotationsApplications=column_ifexists('src_ip_enrichments_annotations_applications_s', ''),
        SrcIpEnrichmentsAnnotationsEnvironments=column_ifexists('src_ip_enrichments_annotations_environments_s', ''),
        SrcIpEnrichmentsAnnotationsLocation=column_ifexists('src_ip_enrichments_annotations_locations_s', ''),
        HttpHostnameEnrichmentsIpEnrichmentsGeoCountry=column_ifexists('http_hostname_enrichments_ip_enrichments_geo_country_s', ''),
        HttpHostnameEnrichmentsIpEnrichmentsGeoSubdivision=column_ifexists('http_hostname_enrichments_ip_enrichments_geo_subdivision_s', ''),
        HttpHostnameEnrichmentsIpEnrichmentsGeoCity=column_ifexists('http_hostname_enrichments_ip_enrichments_geo_city_s', ''),
        HttpHostnameEnrichmentsIpEnrichmentsAsnAsn=column_ifexists('http_hostname_enrichments_ip_enrichments_asn_asn_d', ''),
        HttpHostnameEnrichmentsIpEnrichmentsAsnOrg=column_ifexists('http_hostname_enrichments_ip_enrichments_asn_org_s', ''),
        HttpHostnameEnrichmentsIpEnrichmentsAsnIsp=column_ifexists('http_hostname_enrichments_ip_enrichments_asn_isp_s', ''),
        HttpHostnameEnrichmentsIpEnrichmentsAsnAsnOrg=column_ifexists('http_hostname_enrichments_ip_enrichments_asn_asn_org_s', ''),
        HttpHostnameEnrichmentsIpEnrichmentsInternal=column_ifexists('http_hostname_enrichments_ip_enrichments_internal_b', ''),
        HttpHostnameEnrichmentsIpEnrichmentsGeoLocation=column_ifexists('http_hostname_enrichments_ip_enrichments_geo_location_s', ''),
        HttpRedirect=column_ifexists('http_redirect_s', ''),
        SrcIpEnrichmentsGeoCountry=column_ifexists('src_ip_enrichments_geo_country_s', ''),
        SrcIpEnrichmentsAsnAsn=column_ifexists('src_ip_enrichments_asn_asn_d', ''),
        SrcIpEnrichmentsAsnOrg=column_ifexists('src_ip_enrichments_asn_org_s', ''),
        SrcIpEnrichmentsAsnIsp=column_ifexists('src_ip_enrichments_asn_isp_s', ''),
        SrcIpEnrichmentsAsnAsnOrg=column_ifexists('src_ip_enrichments_asn_asn_org_s', ''),
        Timestamp=column_ifexists('timestamp_t', ''),
        UUID=column_ifexists('uuid_g', ''),
        EventType=column_ifexists('event_type_s', ''),
        CustomerId=column_ifexists('customer_id_s', ''),
        SensorId=column_ifexists('sensor_id_s', ''),
        Source=column_ifexists('source_s', ''),
        SrcIp=column_ifexists('src_ip_s', ''),
        SrcIpEnrichmentsInternal=column_ifexists('src_ip_enrichments_internal_b', ''),
        SrcIpEnrichmentsGeoLatitude=column_ifexists('src_ip_enrichments_geo_location_lat_d', ''),
        SrcIpEnrichmentsGeoLongitude=column_ifexists('src_ip_enrichments_geo_location_lon_d', ''),
        SrcPort=column_ifexists('src_port_d', ''),
        DesIp=column_ifexists('dest_ip_s', ''),
        DstIpEnrichmentsInternal=column_ifexists('dst_ip_enrichments_internal_b', ''),
        DstIpEnrichmentsGeoLatitude=column_ifexists('dst_ip_enrichments_geo_location_lat_d', ''),
        DstIpEnrichmentsGeoLongitude=column_ifexists('dst_ip_enrichments_geo_location_lon_d', ''),
        DstIpEnrichmentsGeoCountry=column_ifexists('dst_ip_enrichments_geo_country_s', ''),
        DstIpEnrichmentsGeoSubdevision=column_ifexists('dst_ip_enrichments_geo_subdivision_s', ''),
        DstIpEnrichmentsGeoCity=column_ifexists('dst_ip_enrichments_geo_city_s', ''),
        DstIpEnrichmentsAsnAsn=column_ifexists('dst_ip_enrichments_asn_asn_d', ''),
        DstIpEnrichmentsAsnOrg=column_ifexists('dst_ip_enrichments_asn_org_s', ''),
        DstIpEnrichmentsAsnIsp=column_ifexists('dst_ip_enrichments_asn_isp_s', ''),
        DstIpEnrichmentsAsnAsnOrg=column_ifexists('dst_ip_enrichments_asn_asn_org_s', ''),
        GeoDistance=column_ifexists('geo_distance_d', ''),
        Destport=column_ifexists('dest_port_d', ''),
        Protoco=column_ifexists('proto_s', ''),
        AlertSignatureId=column_ifexists('alert_signature_id_d', ''),
        AlertRev=column_ifexists('alert_rev_d', ''),
        AlertSignature=column_ifexists('alert_signature_s', ''),
        AlertCategory=column_ifexists('alert_category_s', ''),
        AlertSeverity=column_ifexists('alert_severity_d', ''),
        HttpStatus=column_ifexists('http_status_d', ''),
        HttpProtoco=column_ifexists('http_protocol_s', ''),
        HttpUrl=column_ifexists('http_url_s', ''),
        HttpHostname=column_ifexists('http_hostname_s', ''),
        HttpHostnameEnrichmentsDomainEnrichmentsDomainEntropy=column_ifexists('http_hostname_enrichments_domain_enrichments_domain_entropy_d', ''),
        HttpLength=column_ifexists('http_length_d', ''),
        HttpMethod=column_ifexists('http_http_method_s', ''),
        HttpContentType=column_ifexists('http_http_content_type_s', ''),
        HttpUserAgent=column_ifexists('http_http_user_agent_s', ''),
        Payload=column_ifexists('payload_s', ''),
        DstIpEnrichmentsAnnotationsApplications=column_ifexists('dst_ip_enrichments_annotations_applications_s', ''),
        DstIpEnrichmentsAnnotationsEnvironments=column_ifexists('dst_ip_enrichments_annotations_environments_s', ''),
        DstIpEnrichmentsAnnotationsLocations=column_ifexists('dst_ip_enrichments_annotations_locations_s', '')
    | project
        TimeGenerated,
        DstIpEnrichmentsAnnotationsTags,
        SrcIpEnrichmentsAnnotationTags,
        HttpRefer,
        Intel,
        SrcIpEnrichmentsGeoSubdivision,
        SrcIpEnrichmentsGeoCity,
        SrcIpEnrichmentsAnnotationsApplications,
        SrcIpEnrichmentsAnnotationsEnvironments,
        SrcIpEnrichmentsAnnotationsLocation,
        HttpHostnameEnrichmentsIpEnrichmentsGeoCountry,
        HttpHostnameEnrichmentsIpEnrichmentsGeoSubdivision,
        HttpHostnameEnrichmentsIpEnrichmentsGeoCity,
        HttpHostnameEnrichmentsIpEnrichmentsAsnAsn,
        HttpHostnameEnrichmentsIpEnrichmentsAsnOrg,
        HttpHostnameEnrichmentsIpEnrichmentsAsnIsp,
        HttpHostnameEnrichmentsIpEnrichmentsAsnAsnOrg,
        HttpHostnameEnrichmentsIpEnrichmentsInternal,
        HttpHostnameEnrichmentsIpEnrichmentsGeoLocation,
        HttpRedirect,
        SrcIpEnrichmentsGeoCountry,
        SrcIpEnrichmentsAsnAsn,
        SrcIpEnrichmentsAsnOrg,
        SrcIpEnrichmentsAsnIsp,
        SrcIpEnrichmentsAsnAsnOrg,
        Timestamp,
        UUID,
        EventType,
        CustomerId,
        SensorId,
        Source,
        SrcIp,
        SrcIpEnrichmentsInternal,
        SrcIpEnrichmentsGeoLatitude,
        SrcIpEnrichmentsGeoLongitude,
        SrcPort,
        DesIp,
        DstIpEnrichmentsInternal,
        DstIpEnrichmentsGeoLatitude,
        DstIpEnrichmentsGeoLongitude,
        DstIpEnrichmentsGeoCountry,
        DstIpEnrichmentsGeoSubdevision,
        DstIpEnrichmentsGeoCity,
        DstIpEnrichmentsAsnAsn,
        DstIpEnrichmentsAsnOrg,
        DstIpEnrichmentsAsnIsp,
        DstIpEnrichmentsAsnAsnOrg,
        GeoDistance,
        Destport,
        Protoco,
        AlertSignatureId,
        AlertRev,
        AlertSignature,
        AlertCategory,
        AlertSeverity,
        HttpStatus,
        HttpProtoco,
        HttpUrl,
        HttpHostname,
        HttpHostnameEnrichmentsDomainEnrichmentsDomainEntropy,
        HttpLength,
        HttpMethod,
        HttpContentType,
        HttpUserAgent,
        Payload,
        DstIpEnrichmentsAnnotationsApplications,
        DstIpEnrichmentsAnnotationsEnvironments,
        DstIpEnrichmentsAnnotationsLocations,
        Type
};

let FortiNDR_Cloud_observation_view = view () {
    FncEventsObservation_CL
    | extend
        Intel=column_ifexists('intel_s', ''),
        DstIpEnrichmentsGeoCountry=column_ifexists('dst_ip_enrichments_geo_country_s', ''),
        DstIpEnrichmentsGeoSubdivision=column_ifexists('dst_ip_enrichments_geo_subdivision_s', ''),
        DstIpEnrichmentsGeoCity=column_ifexists('dst_ip_enrichments_geo_city_s', ''),
        DstIpEnrichmentsAsnAsn=column_ifexists('dst_ip_enrichments_asn_asn_d', ''),
        DstIpEnrichmentsAsnOrg=column_ifexists('dst_ip_enrichments_asn_org_s', ''),
        DstIpEnrichmentsAsnIsp=column_ifexists('dst_ip_enrichments_asn_isp_s', ''),
        DstIpEnrichmentsAsnAsnOrg=column_ifexists('dst_ip_enrichments_asn_asn_org_s', ''),
        Timestamp=column_ifexists('timestamp_t', ''),
        UUId=column_ifexists('uuid_g', ''),
        EventType=column_ifexists('event_type_s', ''),
        CustomerId=column_ifexists('customer_id_s', ''),
        SensorId=column_ifexists('sensor_id_s', ''),
        Source=column_ifexists('source_s', ''),
        EvidenceStartTimestamp=column_ifexists('evidence_start_timestamp_t', ''),
        EvidenceEndTimestamp=column_ifexists('evidence_end_timestamp_t', ''),
        ObservationUUID=column_ifexists('observation_uuid_g', ''),
        Title=column_ifexists('	title_s', ''),
        Confidence=column_ifexists('confidence_s', ''),
        SrcIp=column_ifexists('src_ip_s', ''),
        SrcIpEnrichmentsInternal=column_ifexists('src_ip_enrichments_internal_b', ''),
        SrcIpEnrichmentsGeoLatitude=column_ifexists('src_ip_enrichments_geo_location_lat_d', ''),
        SrcIpEnrichmentsGeoLongitude=column_ifexists('src_ip_enrichments_geo_location_lon_d', ''),
        DstIp=column_ifexists('dst_ip_s', ''),
        DstIpEnrichmentsInternal=column_ifexists('dst_ip_enrichments_internal_b', ''),
        DstIpEnrichmentsGeoLatitude=column_ifexists('dst_ip_enrichments_geo_location_lat_d', ''),
        DstIpEnrichmentsGeoLongitude=column_ifexists('dst_ip_enrichments_geo_location_lon_d', ''),
        DstIpEnrichmentsAnnotationsApplications=column_ifexists('dst_ip_enrichments_annotations_applications_s', ''),
        DstIpEnrichmentsAnnotationsTags=column_ifexists('dst_ip_enrichments_annotations_tags_s', ''),
        GeoDistance=column_ifexists('geo_distance_d', ''),
        SensorIds=column_ifexists('sensor_ids_s', ''),
        EvidenceIQL=column_ifexists('evidence_iql_s', ''),
        Context=column_ifexists('context_s', ''),
        Description=column_ifexists('description_s', ''),
        Class=column_ifexists('class_s', '')
    | project
        TimeGenerated,
        Category,
        Intel,
        DstIpEnrichmentsGeoCountry,
        DstIpEnrichmentsGeoSubdivision,
        DstIpEnrichmentsGeoCity,
        DstIpEnrichmentsAsnAsn,
        DstIpEnrichmentsAsnOrg,
        DstIpEnrichmentsAsnIsp,
        DstIpEnrichmentsAsnAsnOrg,
        Timestamp,
        UUId,
        EventType,
        CustomerId,
        SensorId,
        Source,
        EvidenceStartTimestamp,
        EvidenceEndTimestamp,
        ObservationUUID,
        Title,
        Confidence,
        SrcIp,
        SrcIpEnrichmentsInternal,
        SrcIpEnrichmentsGeoLatitude,
        SrcIpEnrichmentsGeoLongitude,
        DstIp,
        DstIpEnrichmentsInternal,
        DstIpEnrichmentsGeoLatitude,
        DstIpEnrichmentsGeoLongitude,
        DstIpEnrichmentsAnnotationsApplications,
        DstIpEnrichmentsAnnotationsTags,
        GeoDistance,
        SensorIds,
        EvidenceIQL,
        Context,
        Description,
        Class,
        Type
};

let FortiNDR_Cloud_detections_view = view () {
    FncEventsDetections_CL
    | extend
        Date_Resolved=column_ifexists('resolution_timestamp_t', ''),
        Resolution=column_ifexists('resolution_s', ''),
        Account_UUID=column_ifexists('account_uuid_g', ''),
        Event_Count=column_ifexists('event_count_d', ''),
        Rule_Name=column_ifexists('rule_name_s', ''),
        Severity=column_ifexists('rule_severity_s', ''),
        Confidence=column_ifexists('rule_confidence_s', ''),
        Category=column_ifexists('rule_category_s', ''),
        Device_IP=column_ifexists('device_ip_s', ''),
        Sensor_ID=column_ifexists('sensor_id_s', ''),
        Muted=column_ifexists('muted_b', ''),
        Rule_Muted=column_ifexists('muted_rule_b', ''),
        Rule_UUID=column_ifexists('rule_uuid_g', ''),
        Mute_Comment=column_ifexists('muted_comment_s', ''),
        First_Seen=column_ifexists('first_seen_t', ''),
        Last_Seen=column_ifexists('last_seen_t', ''),
        Created=column_ifexists('created_t', ''),
        Updated=column_ifexists('updated_t', ''),
        UUID=column_ifexists('uuid_g', ''),
        Status=column_ifexists('status_s', ''),
        Indicators=column_ifexists('indicators_s', '')
    | project
        TimeGenerated,
        Type,
        Date_Resolved,
        Resolution,
        Account_UUID,
        Event_Count,
        Rule_Name,
        Severity,
        Confidence,
        Category,
        Device_IP,
        Sensor_ID,
        Muted,
        Rule_Muted,
        Rule_UUID,
        Mute_Comment,
        First_Seen,
        Last_Seen,
        Created,
        Updated,
        UUID,
        Status,
        Indicators
};

union isfuzzy=true
    FortiNDR_Cloud_suricata_view,
    FortiNDR_Cloud_observation_view,
    FortiNDR_Cloud_detections_view